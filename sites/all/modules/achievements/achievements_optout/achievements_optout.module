<?php

/**
 * @file
 * Allows users to opt-out of achievements entirely.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function achievements_optout_form_user_profile_form_alter(&$form, $form_state) {
  $account = menu_get_object('user');

  if (!user_access('earn achievements', $account) && $form['#user_category'] == 'account') {
    $form['achievements_optout']['#access'] = FALSE;
  }
}

/**
 * Implements hook_user_update().
 */
function achievements_optout_user_update(&$edit, $account, $category) {
  if (!empty($account->achievements_optout[LANGUAGE_NONE][0]['value']) && $account->achievements_optout[LANGUAGE_NONE][0]['value'] == 1) {
    achievements_user_delete($account);
  }
}

/**
 * Implements hook_page_alter().
 */
function achievements_optout_page_alter(&$page) {
  if (arg(0) == 'user' && arg(2) == 'achievements') {
    $account = menu_get_object('user');
    if (!empty($account->achievements_optout[LANGUAGE_NONE][0]['value']) && $account->achievements_optout[LANGUAGE_NONE][0]['value'] == 1) {
      unset($page['content']['system_main']['achievements']['tabs']);
      unset($page['content']['system_main']['achievements']['stats']);
      $page['content']['system_main']['achievements']['optout'] = array(
        '#markup' => t('This user has chosen not to participate in or unlock achievements.'),
      );
    }
  }
}

/**
 * Implements hook_achievements_access_earn().
 */
function achievements_optout_achievements_access_earn($uid) {
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'user')
    ->entityCondition('entity_id', $uid, '=')
    ->fieldCondition('achievements_optout', 'value', 1);
  $result = $query->execute();

  if (count($result)) {
    return FALSE;
  }

  return NULL;
}
